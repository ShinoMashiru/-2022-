1.
MATCH (p:Person)
WHERE p.gender=77 AND p.education_degree_id=20
RETURN p.id

2.
MATCH (p:Person)
WHERE p.gender=78 AND (p.education_degree_id=20 OR p.education_degree_id=22)
RETURN p.id,p.education_degree_id

3.
match (n:Person)
set n.age = n.id%13+18

match (p:Person)
return p.id,p.age

4.
MATCH (n1:Person )-[:Be_Friend_With]-(n2:Person)
RETURN n1.id AS `person`, count(n2) AS `friends`

5.
MATCH (n1:Person )-[:Be_Friend_With]-(n2:Person)
WITH avg(n2.age) AS avgage,n1.id AS `person`
WHERE avgage<=25
RETURN person

6.

MATCH (n:Person )
RETURN n.id,n.age  ORDER BY n.age DESC
LIMIT 10

7.

MATCH (n:Person )
RETURN n.id,n.age,n.hometown_id 
ORDER BY n.age ,n.hometown_id DESC
SKIP 4
LIMIT 6

8.

MATCH (p:Person {age: 18})
DETACH DELETE p

MATCH (p:Person {age: 19})
DETACH DELETE p

9.

load csv from "file:///circles.csv" as line
create (c:circle{id:line[0]})

load csv from "file:///circles.csv" as line
UNWIND split(line[1], ' ') as x
match(c:circle{id:line[0]})
set c.nodes =[]

load csv from "file:///circles.csv" as line
match(c:circle{id:line[0]})
set c.nodes = c.nodes + line[1]


load csv from "file:///circles.csv" as line
UNWIND split(line[1], ' ') as x
match(c:circle{id:line[0]})
set c.nodes =c.nodes+ toString(x)

match(c:circle)
WITH size(c.nodes) AS s,c.id AS i
WHERE s<2
MATCH (p:Person )
WITH p.circle as a,p.id as b
WHERE i IN a  
return b,a

match(c:circle)
WITH size(c.nodes) AS s,c.id AS i
WHERE s<2
MATCH (p:Person )
WITH p.circle as a,p.id as b,p as per
WHERE i IN a  
DETACH DELETE per

10.

match(n1:Person{id:1})-[:Be_Friend_With]-(n2:Person)
UNWIND n2.id as friends
match(p1:Person{id:friends})-[:Be_Friend_With]-(p2:Person)
UNWIND p2.id as friends_friends
return DISTINCT friends,friends_friends

11.

match(p1:Person{id:42})-[:Be_Friend_With]-(p2:Person)
UNWIND p2.id as pfriends
UNWIND p1.circle AS pc
UNWIND p1.id AS pid
MATCH(c:circle )
with c.nodes as pcp, c.id as cid,pfriends as p_friends,pid as p_id
WHERE cid IN pc 
return DISTINCT p_id,p_friends,cid,pcp

12.

MATCH (p1:Person {id:236}),(p2:Person{id:239}),p=shortestpath((p1)-[*]-(p2))
RETURN p,length(p)

MATCH (p1:Person {id:295}),(p2:Person{id:170}),p=shortestpath((p1)-[*]-(p2))
RETURN p,length(p)

MATCH (p1:Person {id:99}),(p2:Person{id:161}),p=shortestpath((p1)-[*]-(p2))
RETURN p,length(p)

13.

MATCH (p1:Person {id:1})-[*2..3]-(p2:Person)
RETURN  DISTINCT p1.id,p2.id

14.

match(n1:Person{id:1})-[:Be_Friend_With]-(n2:Person)
WITH n2.id as friends_id,n2.education_school_id as esi
return DISTINCT collect(esi)

15.

MATCH p= (p1:Person {id:1})-[*..3]-(p2:Person{id:3})
return p

MATCH(p:Person),path=(p1:Person {id:1})-[*..3]-(p2:Person{id:3})
WHERE p in nodes(path) AND p.age>22
RETURN DISTINCT p.id






